//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 QuerySyntax.g 2013-10-16 08:52:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Qupid.AutoGen 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class QuerySyntaxLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int BY=5;
	public const int COMMA=6;
	public const int DOT=7;
	public const int EQUALS=8;
	public const int FROM=9;
	public const int GREATER_THAN=10;
	public const int GREATER_THAN_EQUAL=11;
	public const int GROUP=12;
	public const int HAVING=13;
	public const int ID=14;
	public const int JOIN=15;
	public const int LESS_THAN=16;
	public const int LESS_THAN_EQUAL=17;
	public const int NOT_EQUALS=18;
	public const int NUMBER_LITERAL=19;
	public const int ON=20;
	public const int OR=21;
	public const int QUOTE=22;
	public const int SELECT=23;
	public const int STAR=24;
	public const int STRING_LITERAL=25;
	public const int UNWIND=26;
	public const int WHERE=27;
	public const int WITH=28;
	public const int WS=29;

	// delegates
	// delegators

	public QuerySyntaxLexer()
	{
		OnCreated();
	}

	public QuerySyntaxLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public QuerySyntaxLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "QuerySyntax.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 1);
		TraceIn("COMMA", 1);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:9:7: ( ',' )
			DebugEnterAlt(1);
			// QuerySyntax.g:9:9: ','
			{
			DebugLocation(9, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 1);
			LeaveRule("COMMA", 1);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 2);
		TraceIn("DOT", 2);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:10:5: ( '.' )
			DebugEnterAlt(1);
			// QuerySyntax.g:10:7: '.'
			{
			DebugLocation(10, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 2);
			LeaveRule("DOT", 2);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 3);
		TraceIn("STAR", 3);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:11:6: ( '*' )
			DebugEnterAlt(1);
			// QuerySyntax.g:11:8: '*'
			{
			DebugLocation(11, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 3);
			LeaveRule("STAR", 3);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_HAVING();
	partial void LeaveRule_HAVING();

	// $ANTLR start "HAVING"
	[GrammarRule("HAVING")]
	private void mHAVING()
	{
		EnterRule_HAVING();
		EnterRule("HAVING", 4);
		TraceIn("HAVING", 4);
		try
		{
			int _type = HAVING;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:166:8: ( ( 'H' | 'h' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:166:10: ( 'H' | 'h' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' )
			{
			DebugLocation(166, 10);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(166, 19);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(166, 28);
			if (input.LA(1)=='V'||input.LA(1)=='v')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(166, 37);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(166, 46);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(166, 55);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HAVING", 4);
			LeaveRule("HAVING", 4);
			LeaveRule_HAVING();
		}
	}
	// $ANTLR end "HAVING"

	partial void EnterRule_UNWIND();
	partial void LeaveRule_UNWIND();

	// $ANTLR start "UNWIND"
	[GrammarRule("UNWIND")]
	private void mUNWIND()
	{
		EnterRule_UNWIND();
		EnterRule("UNWIND", 5);
		TraceIn("UNWIND", 5);
		try
		{
			int _type = UNWIND;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:167:8: ( ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'W' | 'w' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'D' | 'd' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:167:10: ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'W' | 'w' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'D' | 'd' )
			{
			DebugLocation(167, 10);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(167, 19);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(167, 28);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(167, 37);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(167, 46);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(167, 55);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UNWIND", 5);
			LeaveRule("UNWIND", 5);
			LeaveRule_UNWIND();
		}
	}
	// $ANTLR end "UNWIND"

	partial void EnterRule_GROUP();
	partial void LeaveRule_GROUP();

	// $ANTLR start "GROUP"
	[GrammarRule("GROUP")]
	private void mGROUP()
	{
		EnterRule_GROUP();
		EnterRule("GROUP", 6);
		TraceIn("GROUP", 6);
		try
		{
			int _type = GROUP;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:168:7: ( ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'P' | 'p' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:168:9: ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'P' | 'p' )
			{
			DebugLocation(168, 9);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(168, 18);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(168, 27);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(168, 36);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(168, 45);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GROUP", 6);
			LeaveRule("GROUP", 6);
			LeaveRule_GROUP();
		}
	}
	// $ANTLR end "GROUP"

	partial void EnterRule_BY();
	partial void LeaveRule_BY();

	// $ANTLR start "BY"
	[GrammarRule("BY")]
	private void mBY()
	{
		EnterRule_BY();
		EnterRule("BY", 7);
		TraceIn("BY", 7);
		try
		{
			int _type = BY;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:169:4: ( ( 'B' | 'b' ) ( 'Y' | 'y' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:169:6: ( 'B' | 'b' ) ( 'Y' | 'y' )
			{
			DebugLocation(169, 6);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(169, 15);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BY", 7);
			LeaveRule("BY", 7);
			LeaveRule_BY();
		}
	}
	// $ANTLR end "BY"

	partial void EnterRule_JOIN();
	partial void LeaveRule_JOIN();

	// $ANTLR start "JOIN"
	[GrammarRule("JOIN")]
	private void mJOIN()
	{
		EnterRule_JOIN();
		EnterRule("JOIN", 8);
		TraceIn("JOIN", 8);
		try
		{
			int _type = JOIN;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:170:6: ( ( 'J' | 'j' ) ( 'O' | 'o' ) ( 'I' | 'i' ) ( 'N' | 'n' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:170:8: ( 'J' | 'j' ) ( 'O' | 'o' ) ( 'I' | 'i' ) ( 'N' | 'n' )
			{
			DebugLocation(170, 8);
			if (input.LA(1)=='J'||input.LA(1)=='j')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(170, 17);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(170, 26);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(170, 35);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JOIN", 8);
			LeaveRule("JOIN", 8);
			LeaveRule_JOIN();
		}
	}
	// $ANTLR end "JOIN"

	partial void EnterRule_FROM();
	partial void LeaveRule_FROM();

	// $ANTLR start "FROM"
	[GrammarRule("FROM")]
	private void mFROM()
	{
		EnterRule_FROM();
		EnterRule("FROM", 9);
		TraceIn("FROM", 9);
		try
		{
			int _type = FROM;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:171:6: ( ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:171:8: ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' )
			{
			DebugLocation(171, 8);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(171, 17);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(171, 26);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(171, 35);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FROM", 9);
			LeaveRule("FROM", 9);
			LeaveRule_FROM();
		}
	}
	// $ANTLR end "FROM"

	partial void EnterRule_WHERE();
	partial void LeaveRule_WHERE();

	// $ANTLR start "WHERE"
	[GrammarRule("WHERE")]
	private void mWHERE()
	{
		EnterRule_WHERE();
		EnterRule("WHERE", 10);
		TraceIn("WHERE", 10);
		try
		{
			int _type = WHERE;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:172:7: ( ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:172:9: ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' )
			{
			DebugLocation(172, 9);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(172, 18);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(172, 27);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(172, 36);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(172, 45);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHERE", 10);
			LeaveRule("WHERE", 10);
			LeaveRule_WHERE();
		}
	}
	// $ANTLR end "WHERE"

	partial void EnterRule_WITH();
	partial void LeaveRule_WITH();

	// $ANTLR start "WITH"
	[GrammarRule("WITH")]
	private void mWITH()
	{
		EnterRule_WITH();
		EnterRule("WITH", 11);
		TraceIn("WITH", 11);
		try
		{
			int _type = WITH;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:173:6: ( ( 'W' | 'w' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'H' | 'h' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:173:8: ( 'W' | 'w' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'H' | 'h' )
			{
			DebugLocation(173, 8);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(173, 17);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(173, 26);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(173, 35);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WITH", 11);
			LeaveRule("WITH", 11);
			LeaveRule_WITH();
		}
	}
	// $ANTLR end "WITH"

	partial void EnterRule_ON();
	partial void LeaveRule_ON();

	// $ANTLR start "ON"
	[GrammarRule("ON")]
	private void mON()
	{
		EnterRule_ON();
		EnterRule("ON", 12);
		TraceIn("ON", 12);
		try
		{
			int _type = ON;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:174:4: ( ( 'O' | 'o' ) ( 'N' | 'n' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:174:6: ( 'O' | 'o' ) ( 'N' | 'n' )
			{
			DebugLocation(174, 6);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(174, 15);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ON", 12);
			LeaveRule("ON", 12);
			LeaveRule_ON();
		}
	}
	// $ANTLR end "ON"

	partial void EnterRule_SELECT();
	partial void LeaveRule_SELECT();

	// $ANTLR start "SELECT"
	[GrammarRule("SELECT")]
	private void mSELECT()
	{
		EnterRule_SELECT();
		EnterRule("SELECT", 13);
		TraceIn("SELECT", 13);
		try
		{
			int _type = SELECT;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:175:8: ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) )
			DebugEnterAlt(1);
			// QuerySyntax.g:175:10: ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' )
			{
			DebugLocation(175, 10);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(175, 19);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(175, 28);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(175, 37);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(175, 46);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(175, 55);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELECT", 13);
			LeaveRule("SELECT", 13);
			LeaveRule_SELECT();
		}
	}
	// $ANTLR end "SELECT"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 14);
		TraceIn("EQUALS", 14);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:176:8: ( '=' )
			DebugEnterAlt(1);
			// QuerySyntax.g:176:10: '='
			{
			DebugLocation(176, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 14);
			LeaveRule("EQUALS", 14);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_NOT_EQUALS();
	partial void LeaveRule_NOT_EQUALS();

	// $ANTLR start "NOT_EQUALS"
	[GrammarRule("NOT_EQUALS")]
	private void mNOT_EQUALS()
	{
		EnterRule_NOT_EQUALS();
		EnterRule("NOT_EQUALS", 15);
		TraceIn("NOT_EQUALS", 15);
		try
		{
			int _type = NOT_EQUALS;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:177:12: ( '<>' )
			DebugEnterAlt(1);
			// QuerySyntax.g:177:14: '<>'
			{
			DebugLocation(177, 14);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUALS", 15);
			LeaveRule("NOT_EQUALS", 15);
			LeaveRule_NOT_EQUALS();
		}
	}
	// $ANTLR end "NOT_EQUALS"

	partial void EnterRule_GREATER_THAN();
	partial void LeaveRule_GREATER_THAN();

	// $ANTLR start "GREATER_THAN"
	[GrammarRule("GREATER_THAN")]
	private void mGREATER_THAN()
	{
		EnterRule_GREATER_THAN();
		EnterRule("GREATER_THAN", 16);
		TraceIn("GREATER_THAN", 16);
		try
		{
			int _type = GREATER_THAN;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:178:14: ( '>' )
			DebugEnterAlt(1);
			// QuerySyntax.g:178:16: '>'
			{
			DebugLocation(178, 16);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_THAN", 16);
			LeaveRule("GREATER_THAN", 16);
			LeaveRule_GREATER_THAN();
		}
	}
	// $ANTLR end "GREATER_THAN"

	partial void EnterRule_GREATER_THAN_EQUAL();
	partial void LeaveRule_GREATER_THAN_EQUAL();

	// $ANTLR start "GREATER_THAN_EQUAL"
	[GrammarRule("GREATER_THAN_EQUAL")]
	private void mGREATER_THAN_EQUAL()
	{
		EnterRule_GREATER_THAN_EQUAL();
		EnterRule("GREATER_THAN_EQUAL", 17);
		TraceIn("GREATER_THAN_EQUAL", 17);
		try
		{
			int _type = GREATER_THAN_EQUAL;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:179:20: ( '>=' )
			DebugEnterAlt(1);
			// QuerySyntax.g:179:22: '>='
			{
			DebugLocation(179, 22);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_THAN_EQUAL", 17);
			LeaveRule("GREATER_THAN_EQUAL", 17);
			LeaveRule_GREATER_THAN_EQUAL();
		}
	}
	// $ANTLR end "GREATER_THAN_EQUAL"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 18);
		TraceIn("LESS_THAN", 18);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:180:11: ( '<' )
			DebugEnterAlt(1);
			// QuerySyntax.g:180:13: '<'
			{
			DebugLocation(180, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 18);
			LeaveRule("LESS_THAN", 18);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LESS_THAN_EQUAL();
	partial void LeaveRule_LESS_THAN_EQUAL();

	// $ANTLR start "LESS_THAN_EQUAL"
	[GrammarRule("LESS_THAN_EQUAL")]
	private void mLESS_THAN_EQUAL()
	{
		EnterRule_LESS_THAN_EQUAL();
		EnterRule("LESS_THAN_EQUAL", 19);
		TraceIn("LESS_THAN_EQUAL", 19);
		try
		{
			int _type = LESS_THAN_EQUAL;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:181:17: ( '<=' )
			DebugEnterAlt(1);
			// QuerySyntax.g:181:19: '<='
			{
			DebugLocation(181, 19);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN_EQUAL", 19);
			LeaveRule("LESS_THAN_EQUAL", 19);
			LeaveRule_LESS_THAN_EQUAL();
		}
	}
	// $ANTLR end "LESS_THAN_EQUAL"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 20);
		TraceIn("AND", 20);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:182:5: ( 'AND' | 'and' )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1=='A'))
			{
				alt1 = 1;
			}
			else if ((LA1_1=='a'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:182:7: 'AND'
				{
				DebugLocation(182, 7);
				Match("AND"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// QuerySyntax.g:182:15: 'and'
				{
				DebugLocation(182, 15);
				Match("and"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 20);
			LeaveRule("AND", 20);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 21);
		TraceIn("OR", 21);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:183:4: ( 'OR' | 'or' )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1=='O'))
			{
				alt2 = 1;
			}
			else if ((LA2_1=='o'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:183:6: 'OR'
				{
				DebugLocation(183, 6);
				Match("OR"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// QuerySyntax.g:183:13: 'or'
				{
				DebugLocation(183, 13);
				Match("or"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 21);
			LeaveRule("OR", 21);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 22);
		TraceIn("WS", 22);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:184:4: ( ( ' ' | '\\r' | '\\t' | '\\n' )+ )
			DebugEnterAlt(1);
			// QuerySyntax.g:184:6: ( ' ' | '\\r' | '\\t' | '\\n' )+
			{
			DebugLocation(184, 6);
			// QuerySyntax.g:184:6: ( ' ' | '\\r' | '\\t' | '\\n' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='\t' && LA3_1<='\n')||LA3_1=='\r'||LA3_1==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:
					{
					DebugLocation(184, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(184, 28);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 22);
			LeaveRule("WS", 22);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 23);
		TraceIn("ID", 23);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:185:4: ( ( '_' | 'a' .. 'z' | 'A' .. 'Z' ) ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// QuerySyntax.g:185:6: ( '_' | 'a' .. 'z' | 'A' .. 'Z' ) ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )*
			{
			DebugLocation(185, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(185, 30);
			// QuerySyntax.g:185:30: ( '_' | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')||(LA4_1>='A' && LA4_1<='Z')||LA4_1=='_'||(LA4_1>='a' && LA4_1<='z')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:
					{
					DebugLocation(185, 30);
					input.Consume();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 23);
			LeaveRule("ID", 23);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_NUMBER_LITERAL();
	partial void LeaveRule_NUMBER_LITERAL();

	// $ANTLR start "NUMBER_LITERAL"
	[GrammarRule("NUMBER_LITERAL")]
	private void mNUMBER_LITERAL()
	{
		EnterRule_NUMBER_LITERAL();
		EnterRule("NUMBER_LITERAL", 24);
		TraceIn("NUMBER_LITERAL", 24);
		try
		{
			int _type = NUMBER_LITERAL;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:186:16: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// QuerySyntax.g:186:18: ( '0' .. '9' )+
			{
			DebugLocation(186, 18);
			// QuerySyntax.g:186:18: ( '0' .. '9' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='0' && LA5_1<='9')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:
					{
					DebugLocation(186, 18);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER_LITERAL", 24);
			LeaveRule("NUMBER_LITERAL", 24);
			LeaveRule_NUMBER_LITERAL();
		}
	}
	// $ANTLR end "NUMBER_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 25);
		TraceIn("STRING_LITERAL", 25);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:187:16: ( QUOTE ( options {greedy=false; } : . )* QUOTE )
			DebugEnterAlt(1);
			// QuerySyntax.g:187:18: QUOTE ( options {greedy=false; } : . )* QUOTE
			{
			DebugLocation(187, 18);
			mQUOTE(); 
			DebugLocation(187, 24);
			// QuerySyntax.g:187:24: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='\"'||LA6_1=='\''))
				{
					alt6 = 2;
				}
				else if (((LA6_1>='\u0000' && LA6_1<='!')||(LA6_1>='#' && LA6_1<='&')||(LA6_1>='(' && LA6_1<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:187:51: .
					{
					DebugLocation(187, 51);
					MatchAny(); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(187, 55);
			mQUOTE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 25);
			LeaveRule("STRING_LITERAL", 25);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 26);
		TraceIn("QUOTE", 26);
		try
		{
			int _type = QUOTE;
			int _channel = DefaultTokenChannel;
			// QuerySyntax.g:188:7: ( '\\\"' | '\\'' )
			DebugEnterAlt(1);
			// QuerySyntax.g:
			{
			DebugLocation(188, 7);
			if (input.LA(1)=='\"'||input.LA(1)=='\'')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTE", 26);
			LeaveRule("QUOTE", 26);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	public override void mTokens()
	{
		// QuerySyntax.g:1:8: ( COMMA | DOT | STAR | HAVING | UNWIND | GROUP | BY | JOIN | FROM | WHERE | WITH | ON | SELECT | EQUALS | NOT_EQUALS | GREATER_THAN | GREATER_THAN_EQUAL | LESS_THAN | LESS_THAN_EQUAL | AND | OR | WS | ID | NUMBER_LITERAL | STRING_LITERAL | QUOTE )
		int alt7=26;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// QuerySyntax.g:1:10: COMMA
			{
			DebugLocation(1, 10);
			mCOMMA(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// QuerySyntax.g:1:16: DOT
			{
			DebugLocation(1, 16);
			mDOT(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// QuerySyntax.g:1:20: STAR
			{
			DebugLocation(1, 20);
			mSTAR(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// QuerySyntax.g:1:25: HAVING
			{
			DebugLocation(1, 25);
			mHAVING(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// QuerySyntax.g:1:32: UNWIND
			{
			DebugLocation(1, 32);
			mUNWIND(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// QuerySyntax.g:1:39: GROUP
			{
			DebugLocation(1, 39);
			mGROUP(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// QuerySyntax.g:1:45: BY
			{
			DebugLocation(1, 45);
			mBY(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// QuerySyntax.g:1:48: JOIN
			{
			DebugLocation(1, 48);
			mJOIN(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// QuerySyntax.g:1:53: FROM
			{
			DebugLocation(1, 53);
			mFROM(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// QuerySyntax.g:1:58: WHERE
			{
			DebugLocation(1, 58);
			mWHERE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// QuerySyntax.g:1:64: WITH
			{
			DebugLocation(1, 64);
			mWITH(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// QuerySyntax.g:1:69: ON
			{
			DebugLocation(1, 69);
			mON(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// QuerySyntax.g:1:72: SELECT
			{
			DebugLocation(1, 72);
			mSELECT(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// QuerySyntax.g:1:79: EQUALS
			{
			DebugLocation(1, 79);
			mEQUALS(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// QuerySyntax.g:1:86: NOT_EQUALS
			{
			DebugLocation(1, 86);
			mNOT_EQUALS(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// QuerySyntax.g:1:97: GREATER_THAN
			{
			DebugLocation(1, 97);
			mGREATER_THAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// QuerySyntax.g:1:110: GREATER_THAN_EQUAL
			{
			DebugLocation(1, 110);
			mGREATER_THAN_EQUAL(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// QuerySyntax.g:1:129: LESS_THAN
			{
			DebugLocation(1, 129);
			mLESS_THAN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// QuerySyntax.g:1:139: LESS_THAN_EQUAL
			{
			DebugLocation(1, 139);
			mLESS_THAN_EQUAL(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// QuerySyntax.g:1:155: AND
			{
			DebugLocation(1, 155);
			mAND(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// QuerySyntax.g:1:159: OR
			{
			DebugLocation(1, 159);
			mOR(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// QuerySyntax.g:1:162: WS
			{
			DebugLocation(1, 162);
			mWS(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// QuerySyntax.g:1:165: ID
			{
			DebugLocation(1, 165);
			mID(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// QuerySyntax.g:1:168: NUMBER_LITERAL
			{
			DebugLocation(1, 168);
			mNUMBER_LITERAL(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// QuerySyntax.g:1:183: STRING_LITERAL
			{
			DebugLocation(1, 183);
			mSTRING_LITERAL(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// QuerySyntax.g:1:198: QUOTE
			{
			DebugLocation(1, 198);
			mQUOTE(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this, SpecialStateTransition7);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF\x9\x14\x1\xFFFF\x1\x24\x1\x26\x3\x14\x3\xFFFF\x1\x2A\x3\x14"+
			"\x1\x2F\x4\x14\x1\x34\x1\x35\x1\x14\x5\xFFFF\x2\x14\x1\x35\x2\xFFFF\x3"+
			"\x14\x1\xFFFF\x4\x14\x2\xFFFF\x1\x14\x2\x41\x3\x14\x1\x45\x1\x46\x1\x14"+
			"\x1\x48\x1\x14\x1\xFFFF\x2\x14\x1\x4C\x2\xFFFF\x1\x4D\x1\xFFFF\x1\x14"+
			"\x1\x4F\x1\x50\x2\xFFFF\x1\x51\x3\xFFFF";
		private const string DFA7_eofS =
			"\x52\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x3\xFFFF\x1\x41\x1\x4E\x1\x52\x1\x59\x1\x4F\x1\x52\x1\x48\x1\x4E"+
			"\x1\x45\x1\xFFFF\x2\x3D\x1\x4E\x1\x6E\x1\x4E\x3\xFFFF\x1\x0\x1\x56\x1"+
			"\x57\x1\x4F\x1\x30\x1\x49\x1\x4F\x1\x45\x1\x54\x2\x30\x1\x4C\x5\xFFFF"+
			"\x1\x44\x1\x64\x1\x30\x2\xFFFF\x2\x49\x1\x55\x1\xFFFF\x1\x4E\x1\x4D\x1"+
			"\x52\x1\x48\x2\xFFFF\x1\x45\x2\x30\x2\x4E\x1\x50\x2\x30\x1\x45\x1\x30"+
			"\x1\x43\x1\xFFFF\x1\x47\x1\x44\x1\x30\x2\xFFFF\x1\x30\x1\xFFFF\x1\x54"+
			"\x2\x30\x2\xFFFF\x1\x30\x3\xFFFF";
		private const string DFA7_maxS =
			"\x1\x7A\x3\xFFFF\x1\x61\x1\x6E\x1\x72\x1\x79\x1\x6F\x1\x72\x1\x69\x1"+
			"\x6E\x1\x65\x1\xFFFF\x1\x3E\x1\x3D\x1\x4E\x1\x6E\x1\x72\x3\xFFFF\x1\xFFFF"+
			"\x1\x76\x1\x77\x1\x6F\x1\x7A\x1\x69\x1\x6F\x1\x65\x1\x74\x2\x7A\x1\x6C"+
			"\x5\xFFFF\x1\x44\x1\x64\x1\x7A\x2\xFFFF\x2\x69\x1\x75\x1\xFFFF\x1\x6E"+
			"\x1\x6D\x1\x72\x1\x68\x2\xFFFF\x1\x65\x2\x7A\x2\x6E\x1\x70\x2\x7A\x1"+
			"\x65\x1\x7A\x1\x63\x1\xFFFF\x1\x67\x1\x64\x1\x7A\x2\xFFFF\x1\x7A\x1\xFFFF"+
			"\x1\x74\x2\x7A\x2\xFFFF\x1\x7A\x3\xFFFF";
		private const string DFA7_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x9\xFFFF\x1\xE\x5\xFFFF\x1\x16\x1\x17\x1"+
			"\x18\xC\xFFFF\x1\xF\x1\x13\x1\x12\x1\x11\x1\x10\x3\xFFFF\x1\x1A\x1\x19"+
			"\x3\xFFFF\x1\x7\x4\xFFFF\x1\xC\x1\x15\xB\xFFFF\x1\x14\x3\xFFFF\x1\x8"+
			"\x1\x9\x1\xFFFF\x1\xB\x3\xFFFF\x1\x6\x1\xA\x1\xFFFF\x1\x4\x1\x5\x1\xD";
		private const string DFA7_specialS =
			"\x16\xFFFF\x1\x0\x3B\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x13\x2\xFFFF\x1\x13\x12\xFFFF\x1\x13\x1\xFFFF\x1\x16\x4\xFFFF\x1"+
				"\x16\x2\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\xA\x15\x2"+
				"\xFFFF\x1\xE\x1\xD\x1\xF\x2\xFFFF\x1\x10\x1\x7\x3\x14\x1\x9\x1\x6\x1"+
				"\x4\x1\x14\x1\x8\x4\x14\x1\xB\x3\x14\x1\xC\x1\x14\x1\x5\x1\x14\x1\xA"+
				"\x3\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1\x11\x1\x7\x3\x14\x1\x9\x1\x6\x1"+
				"\x4\x1\x14\x1\x8\x4\x14\x1\x12\x3\x14\x1\xC\x1\x14\x1\x5\x1\x14\x1\xA"+
				"\x3\x14",
				"",
				"",
				"",
				"\x1\x17\x1F\xFFFF\x1\x17",
				"\x1\x18\x1F\xFFFF\x1\x18",
				"\x1\x19\x1F\xFFFF\x1\x19",
				"\x1\x1A\x1F\xFFFF\x1\x1A",
				"\x1\x1B\x1F\xFFFF\x1\x1B",
				"\x1\x1C\x1F\xFFFF\x1\x1C",
				"\x1\x1D\x1\x1E\x1E\xFFFF\x1\x1D\x1\x1E",
				"\x1\x1F\x3\xFFFF\x1\x20\x1B\xFFFF\x1\x1F",
				"\x1\x21\x1F\xFFFF\x1\x21",
				"",
				"\x1\x23\x1\x22",
				"\x1\x25",
				"\x1\x27",
				"\x1\x28",
				"\x1\x1F\x1F\xFFFF\x1\x1F\x3\xFFFF\x1\x29",
				"",
				"",
				"",
				"\x0\x2B",
				"\x1\x2C\x1F\xFFFF\x1\x2C",
				"\x1\x2D\x1F\xFFFF\x1\x2D",
				"\x1\x2E\x1F\xFFFF\x1\x2E",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x30\x1F\xFFFF\x1\x30",
				"\x1\x31\x1F\xFFFF\x1\x31",
				"\x1\x32\x1F\xFFFF\x1\x32",
				"\x1\x33\x1F\xFFFF\x1\x33",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x36\x1F\xFFFF\x1\x36",
				"",
				"",
				"",
				"",
				"",
				"\x1\x37",
				"\x1\x38",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"",
				"\x1\x39\x1F\xFFFF\x1\x39",
				"\x1\x3A\x1F\xFFFF\x1\x3A",
				"\x1\x3B\x1F\xFFFF\x1\x3B",
				"",
				"\x1\x3C\x1F\xFFFF\x1\x3C",
				"\x1\x3D\x1F\xFFFF\x1\x3D",
				"\x1\x3E\x1F\xFFFF\x1\x3E",
				"\x1\x3F\x1F\xFFFF\x1\x3F",
				"",
				"",
				"\x1\x40\x1F\xFFFF\x1\x40",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x42\x1F\xFFFF\x1\x42",
				"\x1\x43\x1F\xFFFF\x1\x43",
				"\x1\x44\x1F\xFFFF\x1\x44",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x47\x1F\xFFFF\x1\x47",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\x1\x49\x1F\xFFFF\x1\x49",
				"",
				"\x1\x4A\x1F\xFFFF\x1\x4A",
				"\x1\x4B\x1F\xFFFF\x1\x4B",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"\x1\x4E\x1F\xFFFF\x1\x4E",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"",
				"\xA\x14\x7\xFFFF\x1A\x14\x4\xFFFF\x1\x14\x1\xFFFF\x1A\x14",
				"",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( COMMA | DOT | STAR | HAVING | UNWIND | GROUP | BY | JOIN | FROM | WHERE | WITH | ON | SELECT | EQUALS | NOT_EQUALS | GREATER_THAN | GREATER_THAN_EQUAL | LESS_THAN | LESS_THAN_EQUAL | AND | OR | WS | ID | NUMBER_LITERAL | STRING_LITERAL | QUOTE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition7(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA7_1 = input.LA(1);
		int index7_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if (((LA7_1>='\u0000' && LA7_1<='\uFFFF'))) {s = 43;}

				else s = 42;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 7, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion

}

} // namespace  Qupid.AutoGen 
