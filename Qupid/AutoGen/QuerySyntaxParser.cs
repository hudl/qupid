//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 QuerySyntax.g 2013-10-16 08:52:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Text;
	using Qupid.AST;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Qupid.AutoGen 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class QuerySyntaxParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "BY", "COMMA", "DOT", "EQUALS", "FROM", "GREATER_THAN", "GREATER_THAN_EQUAL", "GROUP", "HAVING", "ID", "JOIN", "LESS_THAN", "LESS_THAN_EQUAL", "NOT_EQUALS", "NUMBER_LITERAL", "ON", "OR", "QUOTE", "SELECT", "STAR", "STRING_LITERAL", "UNWIND", "WHERE", "WITH", "WS"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int BY=5;
	public const int COMMA=6;
	public const int DOT=7;
	public const int EQUALS=8;
	public const int FROM=9;
	public const int GREATER_THAN=10;
	public const int GREATER_THAN_EQUAL=11;
	public const int GROUP=12;
	public const int HAVING=13;
	public const int ID=14;
	public const int JOIN=15;
	public const int LESS_THAN=16;
	public const int LESS_THAN_EQUAL=17;
	public const int NOT_EQUALS=18;
	public const int NUMBER_LITERAL=19;
	public const int ON=20;
	public const int OR=21;
	public const int QUOTE=22;
	public const int SELECT=23;
	public const int STAR=24;
	public const int STRING_LITERAL=25;
	public const int UNWIND=26;
	public const int WHERE=27;
	public const int WITH=28;
	public const int WS=29;

	public QuerySyntaxParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public QuerySyntaxParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return QuerySyntaxParser.tokenNames; } }
	public override string GrammarFileName { get { return "QuerySyntax.g"; } }


		public QupidQuery Parse() {
			var result = main();
			return result.q;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class main_return : AstParserRuleReturnScope<object, IToken>
	{
		public QupidQuery q;
		public main_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_main();
	partial void LeaveRule_main();
	// $ANTLR start "main"
	// QuerySyntax.g:35:1: main returns [QupidQuery q] : qq= select_statement EOF ;
	[GrammarRule("main")]
	private QuerySyntaxParser.main_return main()
	{
		EnterRule_main();
		EnterRule("main", 1);
		TraceIn("main", 1);
		QuerySyntaxParser.main_return retval = new QuerySyntaxParser.main_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF1 = default(IToken);
		AstParserRuleReturnScope<object, IToken> qq = default(AstParserRuleReturnScope<object, IToken>);

		object EOF1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "main");
		DebugLocation(35, 4);
		try
		{
			// QuerySyntax.g:35:27: (qq= select_statement EOF )
			DebugEnterAlt(1);
			// QuerySyntax.g:36:5: qq= select_statement EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 8);
			PushFollow(Follow._select_statement_in_main105);
			qq=select_statement();
			PopFollow();

			adaptor.AddChild(root_0, qq.Tree);
			DebugLocation(36, 27);
			EOF1=(IToken)Match(input,EOF,Follow._EOF_in_main107); 
			EOF1_tree = (object)adaptor.Create(EOF1);
			adaptor.AddChild(root_0, EOF1_tree);
			DebugLocation(37, 5);
			 retval.q = (qq!=null?((QuerySyntaxParser.select_statement_return)qq).q:default(QupidQuery)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("main", 1);
			LeaveRule("main", 1);
			LeaveRule_main();
		}
		DebugLocation(38, 4);
		} finally { DebugExitRule(GrammarFileName, "main"); }
		return retval;

	}
	// $ANTLR end "main"

	private sealed partial class select_statement_return : AstParserRuleReturnScope<object, IToken>
	{
		public QupidQuery q;
		public select_statement_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_select_statement();
	partial void LeaveRule_select_statement();
	// $ANTLR start "select_statement"
	// QuerySyntax.g:40:1: select_statement returns [QupidQuery q] : SELECT pl= column_list f= from_clause (wr= where_clause )? (uw= unwind_clause )? (g= group_by_clause )? (h= having_clause )? (with= with_clause )? ;
	[GrammarRule("select_statement")]
	private QuerySyntaxParser.select_statement_return select_statement()
	{
		EnterRule_select_statement();
		EnterRule("select_statement", 2);
		TraceIn("select_statement", 2);
		QuerySyntaxParser.select_statement_return retval = new QuerySyntaxParser.select_statement_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELECT2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> pl = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> f = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> wr = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> uw = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> g = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> h = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> with = default(AstParserRuleReturnScope<object, IToken>);

		object SELECT2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select_statement");
		DebugLocation(40, 4);
		try
		{
			// QuerySyntax.g:40:39: ( SELECT pl= column_list f= from_clause (wr= where_clause )? (uw= unwind_clause )? (g= group_by_clause )? (h= having_clause )? (with= with_clause )? )
			DebugEnterAlt(1);
			// QuerySyntax.g:41:7: SELECT pl= column_list f= from_clause (wr= where_clause )? (uw= unwind_clause )? (g= group_by_clause )? (h= having_clause )? (with= with_clause )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(41, 7);
			SELECT2=(IToken)Match(input,SELECT,Follow._SELECT_in_select_statement134); 
			SELECT2_tree = (object)adaptor.Create(SELECT2);
			adaptor.AddChild(root_0, SELECT2_tree);
			DebugLocation(42, 8);
			PushFollow(Follow._column_list_in_select_statement145);
			pl=column_list();
			PopFollow();

			adaptor.AddChild(root_0, pl.Tree);
			DebugLocation(43, 7);
			PushFollow(Follow._from_clause_in_select_statement157);
			f=from_clause();
			PopFollow();

			adaptor.AddChild(root_0, f.Tree);
			DebugLocation(44, 8);
			// QuerySyntax.g:44:8: (wr= where_clause )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==WHERE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:44:8: wr= where_clause
				{
				DebugLocation(44, 8);
				PushFollow(Follow._where_clause_in_select_statement168);
				wr=where_clause();
				PopFollow();

				adaptor.AddChild(root_0, wr.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(45, 5);
			// QuerySyntax.g:45:5: (uw= unwind_clause )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==UNWIND))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:45:5: uw= unwind_clause
				{
				DebugLocation(45, 5);
				PushFollow(Follow._unwind_clause_in_select_statement176);
				uw=unwind_clause();
				PopFollow();

				adaptor.AddChild(root_0, uw.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(46, 7);
			// QuerySyntax.g:46:7: (g= group_by_clause )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==GROUP))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:46:7: g= group_by_clause
				{
				DebugLocation(46, 7);
				PushFollow(Follow._group_by_clause_in_select_statement188);
				g=group_by_clause();
				PopFollow();

				adaptor.AddChild(root_0, g.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(47, 4);
			// QuerySyntax.g:47:4: (h= having_clause )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==HAVING))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:47:4: h= having_clause
				{
				DebugLocation(47, 4);
				PushFollow(Follow._having_clause_in_select_statement197);
				h=having_clause();
				PopFollow();

				adaptor.AddChild(root_0, h.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(48, 7);
			// QuerySyntax.g:48:7: (with= with_clause )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==WITH))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:48:7: with= with_clause
				{
				DebugLocation(48, 7);
				PushFollow(Follow._with_clause_in_select_statement205);
				with=with_clause();
				PopFollow();

				adaptor.AddChild(root_0, with.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(49, 5);

			    	retval.q = new QupidQuery((pl!=null?((QuerySyntaxParser.column_list_return)pl).pl:default(PropertyList)), (f!=null?((QuerySyntaxParser.from_clause_return)f).s:default(string)), (wr!=null?((QuerySyntaxParser.where_clause_return)wr).wc:default(List<WhereClause>)), (uw!=null?((QuerySyntaxParser.unwind_clause_return)uw).uw:default(UnwindClause)), (g!=null?((QuerySyntaxParser.group_by_clause_return)g).g:default(GroupByClause)), (h!=null?((QuerySyntaxParser.having_clause_return)h).h:default(HavingClause)), (with!=null?((QuerySyntaxParser.with_clause_return)with).w:default(WithClause)));
			        retval.q.ErrorManager = _errorManager;
			    

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_statement", 2);
			LeaveRule("select_statement", 2);
			LeaveRule_select_statement();
		}
		DebugLocation(53, 4);
		} finally { DebugExitRule(GrammarFileName, "select_statement"); }
		return retval;

	}
	// $ANTLR end "select_statement"

	private sealed partial class column_list_return : AstParserRuleReturnScope<object, IToken>
	{
		public PropertyList pl;
		public column_list_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_column_list();
	partial void LeaveRule_column_list();
	// $ANTLR start "column_list"
	// QuerySyntax.g:55:1: column_list returns [PropertyList pl] :scp= select_clause ( ',' scp= select_clause )* ;
	[GrammarRule("column_list")]
	private QuerySyntaxParser.column_list_return column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 3);
		TraceIn("column_list", 3);
		QuerySyntaxParser.column_list_return retval = new QuerySyntaxParser.column_list_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal3 = default(IToken);
		AstParserRuleReturnScope<object, IToken> scp = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal3_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(55, 4);
		try
		{
			// QuerySyntax.g:55:37: (scp= select_clause ( ',' scp= select_clause )* )
			DebugEnterAlt(1);
			// QuerySyntax.g:56:5: scp= select_clause ( ',' scp= select_clause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(56, 5);
			 retval.pl = new PropertyList(); 
			DebugLocation(57, 9);
			PushFollow(Follow._select_clause_in_column_list245);
			scp=select_clause();
			PopFollow();

			adaptor.AddChild(root_0, scp.Tree);
			DebugLocation(57, 25);
			 retval.pl.Add((scp!=null?((QuerySyntaxParser.select_clause_return)scp).pr:default(PropertyReference))); 
			DebugLocation(58, 5);
			// QuerySyntax.g:58:5: ( ',' scp= select_clause )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==COMMA))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:58:6: ',' scp= select_clause
					{
					DebugLocation(58, 6);
					char_literal3=(IToken)Match(input,COMMA,Follow._COMMA_in_column_list254); 
					char_literal3_tree = (object)adaptor.Create(char_literal3);
					adaptor.AddChild(root_0, char_literal3_tree);
					DebugLocation(58, 14);
					PushFollow(Follow._select_clause_in_column_list260);
					scp=select_clause();
					PopFollow();

					adaptor.AddChild(root_0, scp.Tree);
					DebugLocation(58, 30);
					 retval.pl.Add((scp!=null?((QuerySyntaxParser.select_clause_return)scp).pr:default(PropertyReference))); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 3);
			LeaveRule("column_list", 3);
			LeaveRule_column_list();
		}
		DebugLocation(59, 4);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"

	private sealed partial class from_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public string s;
		public from_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_from_clause();
	partial void LeaveRule_from_clause();
	// $ANTLR start "from_clause"
	// QuerySyntax.g:61:1: from_clause returns [string s] : FROM col= ID ;
	[GrammarRule("from_clause")]
	private QuerySyntaxParser.from_clause_return from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 4);
		TraceIn("from_clause", 4);
		QuerySyntaxParser.from_clause_return retval = new QuerySyntaxParser.from_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken col = default(IToken);
		IToken FROM4 = default(IToken);

		object col_tree = default(object);
		object FROM4_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(61, 1);
		try
		{
			// QuerySyntax.g:61:30: ( FROM col= ID )
			DebugEnterAlt(1);
			// QuerySyntax.g:62:5: FROM col= ID
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 5);
			FROM4=(IToken)Match(input,FROM,Follow._FROM_in_from_clause283); 
			FROM4_tree = (object)adaptor.Create(FROM4);
			adaptor.AddChild(root_0, FROM4_tree);
			DebugLocation(62, 14);
			col=(IToken)Match(input,ID,Follow._ID_in_from_clause289); 
			col_tree = (object)adaptor.Create(col);
			adaptor.AddChild(root_0, col_tree);
			DebugLocation(63, 2);
			 retval.s = (col!=null?col.Text:default(string)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 4);
			LeaveRule("from_clause", 4);
			LeaveRule_from_clause();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"

	private sealed partial class group_by_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public GroupByClause g;
		public group_by_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_group_by_clause();
	partial void LeaveRule_group_by_clause();
	// $ANTLR start "group_by_clause"
	// QuerySyntax.g:66:1: group_by_clause returns [GroupByClause g] : GROUP BY pr= property_reference ;
	[GrammarRule("group_by_clause")]
	private QuerySyntaxParser.group_by_clause_return group_by_clause()
	{
		EnterRule_group_by_clause();
		EnterRule("group_by_clause", 5);
		TraceIn("group_by_clause", 5);
		QuerySyntaxParser.group_by_clause_return retval = new QuerySyntaxParser.group_by_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken GROUP5 = default(IToken);
		IToken BY6 = default(IToken);
		AstParserRuleReturnScope<object, IToken> pr = default(AstParserRuleReturnScope<object, IToken>);

		object GROUP5_tree = default(object);
		object BY6_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "group_by_clause");
		DebugLocation(66, 1);
		try
		{
			// QuerySyntax.g:67:2: ( GROUP BY pr= property_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:67:4: GROUP BY pr= property_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(67, 4);
			GROUP5=(IToken)Match(input,GROUP,Follow._GROUP_in_group_by_clause306); 
			GROUP5_tree = (object)adaptor.Create(GROUP5);
			adaptor.AddChild(root_0, GROUP5_tree);
			DebugLocation(68, 3);
			BY6=(IToken)Match(input,BY,Follow._BY_in_group_by_clause311); 
			BY6_tree = (object)adaptor.Create(BY6);
			adaptor.AddChild(root_0, BY6_tree);
			DebugLocation(69, 5);
			PushFollow(Follow._property_reference_in_group_by_clause318);
			pr=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, pr.Tree);
			DebugLocation(70, 2);
			 retval.g = new GroupByClause((pr!=null?((QuerySyntaxParser.property_reference_return)pr).pr:default(PropertyReference))); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group_by_clause", 5);
			LeaveRule("group_by_clause", 5);
			LeaveRule_group_by_clause();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "group_by_clause"); }
		return retval;

	}
	// $ANTLR end "group_by_clause"

	private sealed partial class having_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public HavingClause h;
		public having_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_having_clause();
	partial void LeaveRule_having_clause();
	// $ANTLR start "having_clause"
	// QuerySyntax.g:73:1: having_clause returns [HavingClause h] : HAVING lhsRef= property_reference comp= comparison rhsRef= constant_or_reference ;
	[GrammarRule("having_clause")]
	private QuerySyntaxParser.having_clause_return having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 6);
		TraceIn("having_clause", 6);
		QuerySyntaxParser.having_clause_return retval = new QuerySyntaxParser.having_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken HAVING7 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lhsRef = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comp = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> rhsRef = default(AstParserRuleReturnScope<object, IToken>);

		object HAVING7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(73, 4);
		try
		{
			// QuerySyntax.g:73:38: ( HAVING lhsRef= property_reference comp= comparison rhsRef= constant_or_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:74:17: HAVING lhsRef= property_reference comp= comparison rhsRef= constant_or_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(74, 17);
			HAVING7=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause349); 
			HAVING7_tree = (object)adaptor.Create(HAVING7);
			adaptor.AddChild(root_0, HAVING7_tree);
			DebugLocation(75, 12);
			PushFollow(Follow._property_reference_in_having_clause363);
			lhsRef=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, lhsRef.Tree);
			DebugLocation(76, 10);
			PushFollow(Follow._comparison_in_having_clause379);
			comp=comparison();
			PopFollow();

			adaptor.AddChild(root_0, comp.Tree);
			DebugLocation(77, 12);
			PushFollow(Follow._constant_or_reference_in_having_clause393);
			rhsRef=constant_or_reference();
			PopFollow();

			adaptor.AddChild(root_0, rhsRef.Tree);
			DebugLocation(78, 5);
			 
			    	var literal = (rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string)) == null ? (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).numLiteral:default(long)) : (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string));
			    	retval.h = new HavingClause((lhsRef!=null?((QuerySyntaxParser.property_reference_return)lhsRef).pr:default(PropertyReference)), GetComparison((comp!=null?((IToken)comp.Start):default(IToken))), literal);
			    

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 6);
			LeaveRule("having_clause", 6);
			LeaveRule_having_clause();
		}
		DebugLocation(82, 4);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"

	private sealed partial class with_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public WithClause w;
		public with_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_with_clause();
	partial void LeaveRule_with_clause();
	// $ANTLR start "with_clause"
	// QuerySyntax.g:84:1: with_clause returns [WithClause w] : WITH joinOn= ID ON pr= property_reference ;
	[GrammarRule("with_clause")]
	private QuerySyntaxParser.with_clause_return with_clause()
	{
		EnterRule_with_clause();
		EnterRule("with_clause", 7);
		TraceIn("with_clause", 7);
		QuerySyntaxParser.with_clause_return retval = new QuerySyntaxParser.with_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken joinOn = default(IToken);
		IToken WITH8 = default(IToken);
		IToken ON9 = default(IToken);
		AstParserRuleReturnScope<object, IToken> pr = default(AstParserRuleReturnScope<object, IToken>);

		object joinOn_tree = default(object);
		object WITH8_tree = default(object);
		object ON9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "with_clause");
		DebugLocation(84, 1);
		try
		{
			// QuerySyntax.g:84:34: ( WITH joinOn= ID ON pr= property_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:85:5: WITH joinOn= ID ON pr= property_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(85, 5);
			WITH8=(IToken)Match(input,WITH,Follow._WITH_in_with_clause418); 
			WITH8_tree = (object)adaptor.Create(WITH8);
			adaptor.AddChild(root_0, WITH8_tree);
			DebugLocation(86, 9);
			joinOn=(IToken)Match(input,ID,Follow._ID_in_with_clause425); 
			joinOn_tree = (object)adaptor.Create(joinOn);
			adaptor.AddChild(root_0, joinOn_tree);
			DebugLocation(87, 5);
			ON9=(IToken)Match(input,ON,Follow._ON_in_with_clause431); 
			ON9_tree = (object)adaptor.Create(ON9);
			adaptor.AddChild(root_0, ON9_tree);
			DebugLocation(88, 5);
			PushFollow(Follow._property_reference_in_with_clause439);
			pr=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, pr.Tree);
			DebugLocation(89, 2);

					retval.w = new WithClause((joinOn!=null?joinOn.Text:default(string)), (pr!=null?((QuerySyntaxParser.property_reference_return)pr).pr:default(PropertyReference)));
				

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("with_clause", 7);
			LeaveRule("with_clause", 7);
			LeaveRule_with_clause();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "with_clause"); }
		return retval;

	}
	// $ANTLR end "with_clause"

	private sealed partial class unwind_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public UnwindClause uw;
		public unwind_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_unwind_clause();
	partial void LeaveRule_unwind_clause();
	// $ANTLR start "unwind_clause"
	// QuerySyntax.g:94:1: unwind_clause returns [UnwindClause uw] : UNWIND prop= property_reference ;
	[GrammarRule("unwind_clause")]
	private QuerySyntaxParser.unwind_clause_return unwind_clause()
	{
		EnterRule_unwind_clause();
		EnterRule("unwind_clause", 8);
		TraceIn("unwind_clause", 8);
		QuerySyntaxParser.unwind_clause_return retval = new QuerySyntaxParser.unwind_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken UNWIND10 = default(IToken);
		AstParserRuleReturnScope<object, IToken> prop = default(AstParserRuleReturnScope<object, IToken>);

		object UNWIND10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unwind_clause");
		DebugLocation(94, 1);
		try
		{
			// QuerySyntax.g:94:39: ( UNWIND prop= property_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:95:5: UNWIND prop= property_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(95, 5);
			UNWIND10=(IToken)Match(input,UNWIND,Follow._UNWIND_in_unwind_clause458); 
			UNWIND10_tree = (object)adaptor.Create(UNWIND10);
			adaptor.AddChild(root_0, UNWIND10_tree);
			DebugLocation(96, 7);
			PushFollow(Follow._property_reference_in_unwind_clause466);
			prop=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, prop.Tree);
			DebugLocation(97, 2);

					retval.uw = new UnwindClause((prop!=null?((QuerySyntaxParser.property_reference_return)prop).pr:default(PropertyReference)));
				

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unwind_clause", 8);
			LeaveRule("unwind_clause", 8);
			LeaveRule_unwind_clause();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "unwind_clause"); }
		return retval;

	}
	// $ANTLR end "unwind_clause"

	private sealed partial class where_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public List<WhereClause> wc;
		public where_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_where_clause();
	partial void LeaveRule_where_clause();
	// $ANTLR start "where_clause"
	// QuerySyntax.g:102:1: where_clause returns [List<WhereClause> wc] : WHERE lhsRef= property_reference comp= comparison rhsRef= constant_or_reference (a= additional_where_phrase )* ;
	[GrammarRule("where_clause")]
	private QuerySyntaxParser.where_clause_return where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 9);
		TraceIn("where_clause", 9);
		QuerySyntaxParser.where_clause_return retval = new QuerySyntaxParser.where_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHERE11 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lhsRef = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comp = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> rhsRef = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);

		object WHERE11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(102, 4);
		try
		{
			// QuerySyntax.g:102:43: ( WHERE lhsRef= property_reference comp= comparison rhsRef= constant_or_reference (a= additional_where_phrase )* )
			DebugEnterAlt(1);
			// QuerySyntax.g:103:5: WHERE lhsRef= property_reference comp= comparison rhsRef= constant_or_reference (a= additional_where_phrase )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(103, 5);
			 retval.wc = new List<WhereClause>(); 
			DebugLocation(104, 17);
			WHERE11=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause503); 
			WHERE11_tree = (object)adaptor.Create(WHERE11);
			adaptor.AddChild(root_0, WHERE11_tree);
			DebugLocation(105, 12);
			PushFollow(Follow._property_reference_in_where_clause517);
			lhsRef=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, lhsRef.Tree);
			DebugLocation(106, 10);
			PushFollow(Follow._comparison_in_where_clause533);
			comp=comparison();
			PopFollow();

			adaptor.AddChild(root_0, comp.Tree);
			DebugLocation(107, 12);
			PushFollow(Follow._constant_or_reference_in_where_clause547);
			rhsRef=constant_or_reference();
			PopFollow();

			adaptor.AddChild(root_0, rhsRef.Tree);
			DebugLocation(108, 5);
			 
			    	var literal = (rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string)) == null ? (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).numLiteral:default(long)) : (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string));
			    	retval.wc.Add(new WhereClause((lhsRef!=null?((QuerySyntaxParser.property_reference_return)lhsRef).pr:default(PropertyReference)), GetComparison((comp!=null?((IToken)comp.Start):default(IToken))), literal));
			    
			DebugLocation(112, 17);
			// QuerySyntax.g:112:17: (a= additional_where_phrase )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==AND||LA7_1==OR))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:112:18: a= additional_where_phrase
					{
					DebugLocation(112, 20);
					PushFollow(Follow._additional_where_phrase_in_where_clause576);
					a=additional_where_phrase();
					PopFollow();

					adaptor.AddChild(root_0, a.Tree);
					DebugLocation(112, 46);
					 retval.wc.Add((a!=null?((QuerySyntaxParser.additional_where_phrase_return)a).c:default(WhereClause))); 

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 9);
			LeaveRule("where_clause", 9);
			LeaveRule_where_clause();
		}
		DebugLocation(113, 4);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"

	private sealed partial class additional_where_phrase_return : AstParserRuleReturnScope<object, IToken>
	{
		public WhereClause c;
		public additional_where_phrase_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_additional_where_phrase();
	partial void LeaveRule_additional_where_phrase();
	// $ANTLR start "additional_where_phrase"
	// QuerySyntax.g:115:1: additional_where_phrase returns [WhereClause c] : op= boolean_operator lhsRef= property_reference comp= comparison rhsRef= constant_or_reference ;
	[GrammarRule("additional_where_phrase")]
	private QuerySyntaxParser.additional_where_phrase_return additional_where_phrase()
	{
		EnterRule_additional_where_phrase();
		EnterRule("additional_where_phrase", 10);
		TraceIn("additional_where_phrase", 10);
		QuerySyntaxParser.additional_where_phrase_return retval = new QuerySyntaxParser.additional_where_phrase_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> op = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lhsRef = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comp = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> rhsRef = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "additional_where_phrase");
		DebugLocation(115, 4);
		try
		{
			// QuerySyntax.g:115:47: (op= boolean_operator lhsRef= property_reference comp= comparison rhsRef= constant_or_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:116:5: op= boolean_operator lhsRef= property_reference comp= comparison rhsRef= constant_or_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(116, 8);
			PushFollow(Follow._boolean_operator_in_additional_where_phrase611);
			op=boolean_operator();
			PopFollow();

			adaptor.AddChild(root_0, op.Tree);
			DebugLocation(117, 12);
			PushFollow(Follow._property_reference_in_additional_where_phrase625);
			lhsRef=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, lhsRef.Tree);
			DebugLocation(118, 10);
			PushFollow(Follow._comparison_in_additional_where_phrase641);
			comp=comparison();
			PopFollow();

			adaptor.AddChild(root_0, comp.Tree);
			DebugLocation(119, 12);
			PushFollow(Follow._constant_or_reference_in_additional_where_phrase655);
			rhsRef=constant_or_reference();
			PopFollow();

			adaptor.AddChild(root_0, rhsRef.Tree);
			DebugLocation(120, 5);
			 
			        var literal = (rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string)) == null ? (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).numLiteral:default(long)) : (object)(rhsRef!=null?((QuerySyntaxParser.constant_or_reference_return)rhsRef).strLiteral:default(string));
			        retval.c = new WhereClause(GetBoolOp((op!=null?((IToken)op.Start):default(IToken)).Type), (lhsRef!=null?((QuerySyntaxParser.property_reference_return)lhsRef).pr:default(PropertyReference)), GetComparison((comp!=null?((IToken)comp.Start):default(IToken))), literal);
			    

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additional_where_phrase", 10);
			LeaveRule("additional_where_phrase", 10);
			LeaveRule_additional_where_phrase();
		}
		DebugLocation(124, 4);
		} finally { DebugExitRule(GrammarFileName, "additional_where_phrase"); }
		return retval;

	}
	// $ANTLR end "additional_where_phrase"

	partial void EnterRule_boolean_operator();
	partial void LeaveRule_boolean_operator();
	// $ANTLR start "boolean_operator"
	// QuerySyntax.g:126:1: boolean_operator : ( AND | OR );
	[GrammarRule("boolean_operator")]
	private AstParserRuleReturnScope<object, IToken> boolean_operator()
	{
		EnterRule_boolean_operator();
		EnterRule("boolean_operator", 11);
		TraceIn("boolean_operator", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set12 = default(IToken);

		object set12_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "boolean_operator");
		DebugLocation(126, 6);
		try
		{
			// QuerySyntax.g:126:17: ( AND | OR )
			DebugEnterAlt(1);
			// QuerySyntax.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(126, 17);

			set12=(IToken)input.LT(1);
			if (input.LA(1)==AND||input.LA(1)==OR)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set12));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_operator", 11);
			LeaveRule("boolean_operator", 11);
			LeaveRule_boolean_operator();
		}
		DebugLocation(128, 6);
		} finally { DebugExitRule(GrammarFileName, "boolean_operator"); }
		return retval;

	}
	// $ANTLR end "boolean_operator"

	private sealed partial class constant_or_reference_return : AstParserRuleReturnScope<object, IToken>
	{
		public string strLiteral;
		public long numLiteral;
		public constant_or_reference_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_constant_or_reference();
	partial void LeaveRule_constant_or_reference();
	// $ANTLR start "constant_or_reference"
	// QuerySyntax.g:130:1: constant_or_reference returns [string strLiteral, long numLiteral] : (literal= STRING_LITERAL |num= NUMBER_LITERAL );
	[GrammarRule("constant_or_reference")]
	private QuerySyntaxParser.constant_or_reference_return constant_or_reference()
	{
		EnterRule_constant_or_reference();
		EnterRule("constant_or_reference", 12);
		TraceIn("constant_or_reference", 12);
		QuerySyntaxParser.constant_or_reference_return retval = new QuerySyntaxParser.constant_or_reference_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken literal = default(IToken);
		IToken num = default(IToken);

		object literal_tree = default(object);
		object num_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_or_reference");
		DebugLocation(130, 4);
		try
		{
			// QuerySyntax.g:131:5: (literal= STRING_LITERAL |num= NUMBER_LITERAL )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==STRING_LITERAL))
			{
				alt8 = 1;
			}
			else if ((LA8_1==NUMBER_LITERAL))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// QuerySyntax.g:132:5: literal= STRING_LITERAL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 13);
				literal=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_constant_or_reference710); 
				literal_tree = (object)adaptor.Create(literal);
				adaptor.AddChild(root_0, literal_tree);
				DebugLocation(132, 32);
				 retval.strLiteral = (literal!=null?literal.Text:default(string)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// QuerySyntax.g:134:5: num= NUMBER_LITERAL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 9);
				num=(IToken)Match(input,NUMBER_LITERAL,Follow._NUMBER_LITERAL_in_constant_or_reference746); 
				num_tree = (object)adaptor.Create(num);
				adaptor.AddChild(root_0, num_tree);
				DebugLocation(134, 32);
				 retval.numLiteral = long.Parse((num!=null?num.Text:default(string))); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_or_reference", 12);
			LeaveRule("constant_or_reference", 12);
			LeaveRule_constant_or_reference();
		}
		DebugLocation(135, 4);
		} finally { DebugExitRule(GrammarFileName, "constant_or_reference"); }
		return retval;

	}
	// $ANTLR end "constant_or_reference"

	private sealed partial class select_clause_return : AstParserRuleReturnScope<object, IToken>
	{
		public PropertyReference pr;
		public select_clause_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_select_clause();
	partial void LeaveRule_select_clause();
	// $ANTLR start "select_clause"
	// QuerySyntax.g:137:1: select_clause returns [PropertyReference pr] : p= property_reference ;
	[GrammarRule("select_clause")]
	private QuerySyntaxParser.select_clause_return select_clause()
	{
		EnterRule_select_clause();
		EnterRule("select_clause", 13);
		TraceIn("select_clause", 13);
		QuerySyntaxParser.select_clause_return retval = new QuerySyntaxParser.select_clause_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> p = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "select_clause");
		DebugLocation(137, 4);
		try
		{
			// QuerySyntax.g:137:44: (p= property_reference )
			DebugEnterAlt(1);
			// QuerySyntax.g:138:5: p= property_reference
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(138, 7);
			PushFollow(Follow._property_reference_in_select_clause771);
			p=property_reference();
			PopFollow();

			adaptor.AddChild(root_0, p.Tree);
			DebugLocation(138, 28);
			 retval.pr = (p!=null?((QuerySyntaxParser.property_reference_return)p).pr:default(PropertyReference)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_clause", 13);
			LeaveRule("select_clause", 13);
			LeaveRule_select_clause();
		}
		DebugLocation(139, 4);
		} finally { DebugExitRule(GrammarFileName, "select_clause"); }
		return retval;

	}
	// $ANTLR end "select_clause"

	private sealed partial class property_reference_return : AstParserRuleReturnScope<object, IToken>
	{
		public PropertyReference pr;
		public property_reference_return(QuerySyntaxParser grammar) {OnCreated(grammar);}
		partial void OnCreated(QuerySyntaxParser grammar);
	}

	partial void EnterRule_property_reference();
	partial void LeaveRule_property_reference();
	// $ANTLR start "property_reference"
	// QuerySyntax.g:141:1: property_reference returns [PropertyReference pr] :col= ID ( '.' (part= ID | STAR ) )+ ;
	[GrammarRule("property_reference")]
	private QuerySyntaxParser.property_reference_return property_reference()
	{
		EnterRule_property_reference();
		EnterRule("property_reference", 14);
		TraceIn("property_reference", 14);
		QuerySyntaxParser.property_reference_return retval = new QuerySyntaxParser.property_reference_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken col = default(IToken);
		IToken part = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken STAR14 = default(IToken);

		object col_tree = default(object);
		object part_tree = default(object);
		object char_literal13_tree = default(object);
		object STAR14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "property_reference");
		DebugLocation(141, 4);
		try
		{
			// QuerySyntax.g:141:49: (col= ID ( '.' (part= ID | STAR ) )+ )
			DebugEnterAlt(1);
			// QuerySyntax.g:142:5: col= ID ( '.' (part= ID | STAR ) )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(142, 5);
			 StringBuilder sb = new StringBuilder(); 
			DebugLocation(143, 9);
			col=(IToken)Match(input,ID,Follow._ID_in_property_reference808); 
			col_tree = (object)adaptor.Create(col);
			adaptor.AddChild(root_0, col_tree);
			DebugLocation(144, 17);
			// QuerySyntax.g:144:17: ( '.' (part= ID | STAR ) )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// QuerySyntax.g:144:19: '.' (part= ID | STAR )
					{
					DebugLocation(144, 19);
					char_literal13=(IToken)Match(input,DOT,Follow._DOT_in_property_reference829); 
					char_literal13_tree = (object)adaptor.Create(char_literal13);
					adaptor.AddChild(root_0, char_literal13_tree);
					DebugLocation(145, 13);
					// QuerySyntax.g:145:13: (part= ID | STAR )
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1==ID))
					{
						alt9 = 1;
					}
					else if ((LA9_1==STAR))
					{
						alt9 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// QuerySyntax.g:145:15: part= ID
						{
						DebugLocation(145, 20);
						part=(IToken)Match(input,ID,Follow._ID_in_property_reference849); 
						part_tree = (object)adaptor.Create(part);
						adaptor.AddChild(root_0, part_tree);
						DebugLocation(145, 25);
						 if (sb.Length > 0) { sb.Append("."); } sb.Append((part!=null?part.Text:default(string))); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// QuerySyntax.g:146:21: STAR
						{
						DebugLocation(146, 21);
						STAR14=(IToken)Match(input,STAR,Follow._STAR_in_property_reference874); 
						STAR14_tree = (object)adaptor.Create(STAR14);
						adaptor.AddChild(root_0, STAR14_tree);
						DebugLocation(146, 26);
						 sb.Append("*"); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(149, 5);
			 
			        retval.pr = PropertyReference.GetReference((col!=null?col.Text:default(string)), sb.ToString(), col.Line, col.CharPositionInLine);
			    

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (EarlyExitException eee)
		{

					_errorManager.AddError("I don't know what to make of '" + (col!=null?col.Text:default(string)) + "', properties need be of the form collection.property");
				
		}

		finally
		{
			TraceOut("property_reference", 14);
			LeaveRule("property_reference", 14);
			LeaveRule_property_reference();
		}
		DebugLocation(152, 4);
		} finally { DebugExitRule(GrammarFileName, "property_reference"); }
		return retval;

	}
	// $ANTLR end "property_reference"

	partial void EnterRule_comparison();
	partial void LeaveRule_comparison();
	// $ANTLR start "comparison"
	// QuerySyntax.g:158:1: comparison : ( NOT_EQUALS | EQUALS | GREATER_THAN | LESS_THAN | GREATER_THAN_EQUAL | LESS_THAN_EQUAL );
	[GrammarRule("comparison")]
	private AstParserRuleReturnScope<object, IToken> comparison()
	{
		EnterRule_comparison();
		EnterRule("comparison", 15);
		TraceIn("comparison", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set15 = default(IToken);

		object set15_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparison");
		DebugLocation(158, 16);
		try
		{
			// QuerySyntax.g:158:11: ( NOT_EQUALS | EQUALS | GREATER_THAN | LESS_THAN | GREATER_THAN_EQUAL | LESS_THAN_EQUAL )
			DebugEnterAlt(1);
			// QuerySyntax.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(158, 11);

			set15=(IToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATER_THAN && input.LA(1)<=GREATER_THAN_EQUAL)||(input.LA(1)>=LESS_THAN && input.LA(1)<=NOT_EQUALS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set15));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparison", 15);
			LeaveRule("comparison", 15);
			LeaveRule_comparison();
		}
		DebugLocation(164, 16);
		} finally { DebugExitRule(GrammarFileName, "comparison"); }
		return retval;

	}
	// $ANTLR end "comparison"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _select_statement_in_main105 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_main107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_statement134 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _column_list_in_select_statement145 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _from_clause_in_select_statement157 = new BitSet(new ulong[]{0x1C003002UL});
		public static readonly BitSet _where_clause_in_select_statement168 = new BitSet(new ulong[]{0x14003002UL});
		public static readonly BitSet _unwind_clause_in_select_statement176 = new BitSet(new ulong[]{0x10003002UL});
		public static readonly BitSet _group_by_clause_in_select_statement188 = new BitSet(new ulong[]{0x10002002UL});
		public static readonly BitSet _having_clause_in_select_statement197 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _with_clause_in_select_statement205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_clause_in_column_list245 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _COMMA_in_column_list254 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _select_clause_in_column_list260 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _FROM_in_from_clause283 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_from_clause289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_group_by_clause306 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _BY_in_group_by_clause311 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_group_by_clause318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause349 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_having_clause363 = new BitSet(new ulong[]{0x70D00UL});
		public static readonly BitSet _comparison_in_having_clause379 = new BitSet(new ulong[]{0x2080000UL});
		public static readonly BitSet _constant_or_reference_in_having_clause393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_with_clause418 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_with_clause425 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ON_in_with_clause431 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_with_clause439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNWIND_in_unwind_clause458 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_unwind_clause466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause503 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_where_clause517 = new BitSet(new ulong[]{0x70D00UL});
		public static readonly BitSet _comparison_in_where_clause533 = new BitSet(new ulong[]{0x2080000UL});
		public static readonly BitSet _constant_or_reference_in_where_clause547 = new BitSet(new ulong[]{0x200012UL});
		public static readonly BitSet _additional_where_phrase_in_where_clause576 = new BitSet(new ulong[]{0x200012UL});
		public static readonly BitSet _boolean_operator_in_additional_where_phrase611 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _property_reference_in_additional_where_phrase625 = new BitSet(new ulong[]{0x70D00UL});
		public static readonly BitSet _comparison_in_additional_where_phrase641 = new BitSet(new ulong[]{0x2080000UL});
		public static readonly BitSet _constant_or_reference_in_additional_where_phrase655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_constant_or_reference710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_LITERAL_in_constant_or_reference746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_reference_in_select_clause771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_property_reference808 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _DOT_in_property_reference829 = new BitSet(new ulong[]{0x1004000UL});
		public static readonly BitSet _ID_in_property_reference849 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _STAR_in_property_reference874 = new BitSet(new ulong[]{0x82UL});
	}
	#endregion Follow sets
}

} // namespace  Qupid.AutoGen 
